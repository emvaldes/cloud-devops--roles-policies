{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Condition": {
                "BoolIfExists": {
                    "aws:MultiFactorAuthPresent": "false"
                }
            },
            "Action": "*",
            "Resource": "*",
            "Effect": "Deny",
            "Sid": "DenyRequestsWithoutMFAFlag"
        },
        {
            "Condition": {
                "StringNotEquals": {
                    "aws:PrincipalTag/mfa": "true"
                }
            },
            "Action": "*",
            "Resource": "*",
            "Effect": "Deny",
            "Sid": "DenyUnlessSessionTaggedMFA"
        },
        {
            "Condition": {
                "NumericGreaterThanIfExists": {
                    "aws:MultiFactorAuthAge": "3600"
                }
            },
            "Action": "*",
            "Resource": "*",
            "Effect": "Deny",
            "Sid": "DenyIfMFAOlderThanOneHour"
        },
        {
            "Resource": "*",
            "Effect": "Deny",
            "NotAction": [
                "iam:Get*",
                "iam:List*",
                "iam:SimulateCustomPolicy",
                "iam:SimulatePrincipalPolicy",
                "iam:CreateServiceLinkedRole"
            ],
            "Sid": "DenyIamAllExceptReadSimulateAndSLR"
        },
        {
            "Condition": {
                "StringNotEquals": {
                    "iam:AWSServiceName": [
                        "elasticloadbalancing.amazonaws.com",
                        "globalaccelerator.amazonaws.com",
                        "network-firewall.amazonaws.com",
                        "route53resolver.amazonaws.com",
                        "vpc-lattice.amazonaws.com"
                    ]
                }
            },
            "Action": "iam:CreateServiceLinkedRole",
            "Resource": "*",
            "Effect": "Deny",
            "Sid": "DenyCreateServiceLinkedRoleUnlessNetworkServices"
        },
        {
            "Action": [
                "kms:CancelKeyDeletion",
                "kms:Create*",
                "kms:CreateAlias",
                "kms:CreateGrant",
                "kms:Delete*",
                "kms:DeleteAlias",
                "kms:Disable*",
                "kms:DisableKeyRotation",
                "kms:EnableKeyRotation",
                "kms:PutKeyPolicy",
                "kms:RetireGrant",
                "kms:RevokeGrant",
                "kms:ScheduleKeyDeletion",
                "kms:TagResource",
                "kms:UntagResource",
                "kms:Update*",
                "kms:UpdateAlias"
            ],
            "Resource": "*",
            "Effect": "Deny",
            "Sid": "DenyKmsKeyAdministration"
        },
        {
            "Condition": {
                "StringNotEqualsIfExists": {
                    "kms:ViaService": [
                        "secretsmanager.amazonaws.com",
                        "ssm.amazonaws.com",
                        "s3.amazonaws.com"
                    ]
                }
            },
            "Action": [
                "kms:Encrypt",
                "kms:GenerateDataKey*",
                "kms:ReEncrypt*"
            ],
            "Resource": "*",
            "Effect": "Deny",
            "Sid": "DenyKmsEncryptAndDataKeyExceptSecretsManager"
        },
        {
            "Condition": {
                "StringNotEqualsIfExists": {
                    "kms:ViaService": [
                        "logs.amazonaws.com",
                        "s3.amazonaws.com",
                        "secretsmanager.amazonaws.com",
                        "ssm.amazonaws.com"
                    ]
                }
            },
            "Action": [
                "kms:Decrypt"
            ],
            "Resource": "*",
            "Effect": "Deny",
            "Sid": "DenyKmsDecryptOutsideApprovedServices"
        },
        {
            "Action": [
                "secretsmanager:CancelRotateSecret",
                "secretsmanager:Delete*",
                "secretsmanager:DeleteResourcePolicy",
                "secretsmanager:PutResourcePolicy",
                "secretsmanager:RotateSecret",
                "secretsmanager:StopReplicationToReplica"
            ],
            "Resource": "*",
            "Effect": "Deny",
            "Sid": "DenySecretsManagerSensitiveOps"
        },
        {
            "Action": [
                "acm:ExportCertificate",
                "acm:PutAccountConfiguration"
            ],
            "Resource": "*",
            "Effect": "Deny",
            "Sid": "DenyAcmAccountAndExportOnly"
        },
        {
            "Action": [
                "kms:Decrypt",
                "kms:DescribeKey",
                "kms:Encrypt",
                "kms:GenerateDataKey",
                "kms:GenerateDataKeyWithoutPlaintext",
                "kms:GetKeyPolicy",
                "kms:List*"
            ],
            "Resource": "*",
            "Effect": "Allow",
            "Sid": "KmsReadAndUse"
        },
        {
            "Action": [
                "s3:ListAllMyBuckets"
            ],
            "Resource": "*",
            "Effect": "Allow",
            "Sid": "S3ListAllMyBuckets"
        },
        {
            "Action": [
                "s3:CreateBucket",
                "s3:PutPublicAccessBlock",
                "s3:GetPublicAccessBlock",
                "s3:PutBucketOwnershipControls",
                "s3:GetBucketOwnershipControls",
                "s3:PutBucketVersioning",
                "s3:GetBucketVersioning",
                "s3:PutBucketEncryption",
                "s3:GetEncryptionConfiguration",
                "s3:PutBucketTagging",
                "s3:GetBucketTagging",
                "s3:GetBucketLocation",
                "s3:ListBucket",
                "s3:ListBucketVersions"
            ],
            "Resource": [
                "arn:aws:s3:::network-*"
            ],
            "Effect": "Allow",
            "Sid": "S3NetworkBucketsAdminSafe"
        },
        {
            "Condition": {
                "StringLikeIfExists": {
                    "s3:x-amz-server-side-encryption-aws-kms-key-id": "arn:aws:kms:*:*:alias/network-*"
                },
                "StringEqualsIfExists": {
                    "s3:x-amz-server-side-encryption": [
                        "AES256",
                        "aws:kms"
                    ],
                    "s3:x-amz-acl": "bucket-owner-full-control"
                }
            },
            "Action": [
                "s3:PutObject",
                "s3:GetObject",
                "s3:GetObjectVersion",
                "s3:DeleteObject",
                "s3:DeleteObjectVersion",
                "s3:AbortMultipartUpload",
                "s3:CreateMultipartUpload",
                "s3:UploadPart",
                "s3:UploadPartCopy",
                "s3:CompleteMultipartUpload",
                "s3:ListMultipartUploadParts"
            ],
            "Resource": [
                "arn:aws:s3:::network-*/*"
            ],
            "Effect": "Allow",
            "Sid": "S3NetworkObjectsStrict"
        }
    ]
}
