AWSTemplateFormatVersion: "2010-09-09"
Description: "Merged IAM Managed Policy — Infrastructure (deny first, then allow)"

Parameters:

  ManagedPolicyName:
    Type: String
    Default: network--infrastructure
    Description: "IAM managed policy name for Infrastructure"

  CustomPolicyPath:
    Type: String
    Default: "/managed/network/"
    AllowedPattern: "^/([A-Za-z0-9+=,.@_-]+/)*$"
    Description: "IAM path prefix for policies (use / to disable)"

  DnssecKmsKeyArns:
    Type: String
    Default: ""
    Description: "Optional KMS key ARNs dedicated to Route53 DNSSEC (exclude from blanket KMS denies)"
    AllowedPattern: '^$|^arn:aws:kms:[a-z0-9-]+:[0-9]{12}:key/[A-Fa-f0-9-]+(,arn:aws:kms:[a-z0-9-]+:[0-9]{12}:key/[A-Fa-f0-9-]+)*$'

Conditions:
  HasDnssecKmsKeys: !Not [ !Equals [ !Ref DnssecKmsKeyArns, "" ] ]

Resources:

  InfrastructurePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:

      ManagedPolicyName: !Ref ManagedPolicyName
      Path: !Ref CustomPolicyPath

      PolicyDocument:
        Version: "2012-10-17"
        Statement:

## -------------------------------------------------------------------------- ##
## 1 - Deny: Infrastructure

          ## -------------------------------------------------------------------
          ## Enforce MFA presence everywhere (services that don’t pass the context use BoolIfExists)
          ## -------------------------------------------------------------------
          - Sid: DenyRequestsWithoutMFAFlag
            Effect: Deny
            Action: "*"
            Resource: "*"
            Condition:
              BoolIfExists:
                aws:MultiFactorAuthPresent: "false"  ## Deny if no MFA

          ## -------------------------------------------------------------------
          ## Session must carry mfa=true principal tag (enforced at SSO/assume time)
          ## -------------------------------------------------------------------
          - Sid: DenyUnlessSessionTaggedMFA
            Effect: Deny
            Action: "*"                       ## deny all requests when session missing required tag
            Resource: "*"
            Condition:
              StringNotEquals:
                aws:PrincipalTag/mfa: "true"  ## require federated/assumed session tag mfa=true

          ## -------------------------------------------------------------------
          ## MFA max age 1 hour
          ## -------------------------------------------------------------------
          - Sid: DenyIfMFAOlderThanOneHour
            Effect: Deny
            Action: "*"                       ## deny all requests when MFA is older than threshold
            Resource: "*"
            Condition:
              NumericGreaterThanIfExists:
                aws:MultiFactorAuthAge: 3600  ## max 3600s (1h) since last MFA verification

          ## -------------------------------------------------------------------
          ## PassRole only when CFN is the target service
          ## -------------------------------------------------------------------
          - Sid: DenyPassRoleUnlessCfnService
            Effect: Deny
            Action: iam:PassRole
            Resource: "*"
            Condition:
              StringNotEquals:
                iam:PassedToService: cloudformation.amazonaws.com  ## Force CFN-only PassRole

          ## -------------------------------------------------------------------
          ## Even for CFN, restrict the *role being passed* to CFN exec-role naming
          ## -------------------------------------------------------------------
          - Sid: DenyPassRoleOutsideCfnExecRoles
            Effect: Deny
            Action: iam:PassRole
            NotResource:
              - arn:aws:iam::*:role/cfn-*                          ## Allowed CFN exec roles
              - arn:aws:iam::*:role/cloudformation-*               ## Allowed CFN exec roles
              - arn:aws:iam::*:role/service-role/cfn-*             ## Allowed CFN exec roles
              - arn:aws:iam::*:role/service-role/cloudformation-*  ## Allowed CFN exec roles
            Condition:
              StringEquals:
                iam:PassedToService: cloudformation.amazonaws.com

          ## -------------------------------------------------------------------
          ## IAM admin blocked; exception = discovery + SLR
          ## -------------------------------------------------------------------
          - Sid: DenyIamAllExceptIdentityDiscoveryAndSLR
            Effect: Deny
            NotAction:
              - iam:CreateServiceLinkedRole  ## allow SLR creation; further limited to network services by next guard
              - iam:Get*                     ## read-only inspection of identities, policies, and metadata
              - iam:List*                    ## list-only enumeration for discovery/audits
            Resource: "*"

          ## -------------------------------------------------------------------
          ## IAM admin blocked; exception = policy simulation
          ## -------------------------------------------------------------------
          - Sid: DenyIamAllExceptPolicySimulation
            Effect: Deny
            NotAction:
              - iam:SimulateCustomPolicy     ## run IAM policy simulator on custom policy documents
              - iam:SimulatePrincipalPolicy  ## simulate effective permissions for a given principal
            Resource: "*"

          ## -------------------------------------------------------------------
          ## Only permit SLR creation for network services
          ## -------------------------------------------------------------------
          - Sid: DenyCreateServiceLinkedRoleUnlessNetworkServices
            Effect: Deny
            Action: iam:CreateServiceLinkedRole         ## block SLR creation by default
            Resource: "*"
            Condition:
              StringNotEquals:                          ## allow only for specific AWS network services
                iam:AWSServiceName:
                  - elasticloadbalancing.amazonaws.com  ## ELBv2 / NLB / ALB
                  - globalaccelerator.amazonaws.com     ## AWS Global Accelerator
                  - network-firewall.amazonaws.com      ## AWS Network Firewall
                  - route53resolver.amazonaws.com       ## Route53 Resolver
                  - vpc-lattice.amazonaws.com           ## VPC Lattice

          ## -------------------------------------------------------------------
          ## KMS administration blocked (key/alias/grant/policy)
          ## -------------------------------------------------------------------
          - Sid: DenyKmsKeyAdministration
            Effect: Deny
            ## Toggle Resource/NotResource based on whether DnssecKmsKeyArns is set
            Resource: !If [ HasDnssecKmsKeys, !Ref "AWS::NoValue", "*" ]
            ## NotResource: !Ref DnssecKmsKeyArns  ## EXCEPT these DNSSEC keys
            NotResource: !If
              - HasDnssecKmsKeys
              - !Split [ ",", !Ref DnssecKmsKeyArns ]
              - !Ref "AWS::NoValue"
            Action:
              - kms:CancelKeyDeletion    ## prevent canceling scheduled key deletion once initiated
              - kms:Create*              ## prevent creation of KMS resources (keys, replicas, etc.)
              - kms:CreateAlias          ## prevent creating new key aliases
              - kms:CreateGrant          ## prevent creating grants (delegated key use)
              - kms:Delete*              ## prevent deletions of keys/aliases/grants/policies
              - kms:DeleteAlias          ## explicitly prevent alias deletions
              - kms:Disable*             ## prevent disabling keys/features (e.g., DisableKey, DisableKeyRotation)
              - kms:DisableKeyRotation   ## prevent turning off key rotation
              - kms:EnableKeyRotation    ## prevent turning on key rotation (freeze rotation state)
              - kms:PutKeyPolicy         ## prevent key policy changes (admin/policy tamper)
              - kms:RetireGrant          ## prevent grantees from retiring grants outside governance
              - kms:RevokeGrant          ## prevent administrators from revoking grants ad hoc
              - kms:ScheduleKeyDeletion  ## prevent scheduling key deletion
              - kms:TagResource          ## prevent adding tags on KMS resources
              - kms:UntagResource        ## prevent removing tags on KMS resources
              - kms:Update*              ## prevent updates to keys/aliases/grants/config
              - kms:UpdateAlias          ## explicitly prevent alias updates/retargeting

          ## -------------------------------------------------------------------
          ## Only allow Encrypt/ReEncrypt/DataKey via Secrets Manager (enforce service-bound usage)
          ## -------------------------------------------------------------------
          - Sid: DenyKmsEncryptAndDataKeyExceptSecretsManager
            Effect: Deny
            Action:
              - kms:Encrypt           ## prevent direct encryption unless invoked via Secrets Manager
              - kms:GenerateDataKey*  ## prevent data key generation outside Secrets Manager
              - kms:ReEncrypt*        ## prevent re-encryption unless through Secrets Manager
            Resource: "*"
            Condition:
              StringNotEqualsIfExists:
                kms:ViaService:
                  - secretsmanager.amazonaws.com  ## permit KMS only when invoked by Secrets Manager (encrypt/decrypt/rotation); direct principal KMS calls remain denied
                  - ssm.amazonaws.com             ## allow SSM Parameter Store encryption
                  - s3.amazonaws.com              ## allow S3-initiated KMS use for SSE-KMS (PutObject/Copy/Multipart, replication, lifecycle); still denies direct KMS calls by the principal

          ## -------------------------------------------------------------------
          ## Decrypt allowed only when invoked by approved services (logs, s3, secretsmanager, ssm)
          ## -------------------------------------------------------------------
          - Sid: DenyKmsDecryptOutsideApprovedServices
            Effect: Deny
            Action:
              - kms:Decrypt                        ## block decrypt by default
            Resource: "*"
            Condition:
              StringNotEqualsIfExists:             ## only allow when request comes from these AWS services
                kms:ViaService:
                  - logs.amazonaws.com             ## CloudWatch Logs (log group encryption/decryption)
                  - s3.amazonaws.com               ## S3 (SSE-KMS object encryption/decryption)
                  - secretsmanager.amazonaws.com   ## Secrets Manager (secret rotation/retrieval)
                  - ssm.amazonaws.com              ## Systems Manager Parameter Store (SecureString)

          ## -------------------------------------------------------------------
          ## Secrets Manager sensitive ops blocked; read/get remains via ceiling
          ## -------------------------------------------------------------------
          - Sid: DenySecretsManagerSensitiveOps
            Effect: Deny
            Action:
              - secretsmanager:CancelRotateSecret        ## prevent canceling an in-progress rotation
              - secretsmanager:Delete*                   ## prevent deletion of secrets, versions, replicas, policies
              - secretsmanager:DeleteResourcePolicy      ## prevent removal of resource-based policy
              - secretsmanager:PutResourcePolicy         ## prevent setting/updating resource-based policy (e.g., cross-account)
              - secretsmanager:RotateSecret              ## prevent manual rotation initiation
              - secretsmanager:StopReplicationToReplica  ## prevent stopping cross-region replication
            Resource: "*"

          ## -------------------------------------------------------------------
          ## ACM minimal safety (keep account-level + key export off)
          ## -------------------------------------------------------------------
          - Sid: DenyAcmAccountAndExportOnly
            Effect: Deny
            Action:
              - acm:ExportCertificate        ## prevent private key exfiltration
              - acm:PutAccountConfiguration  ## prevent account-wide ACM setting changes
            Resource: "*"

          ## -------------------------------------------------------------------
          ## CFN safety rails: no stack set deletes, no stack policy fiddling, no disabling termination protection
          ## -------------------------------------------------------------------
          - Sid: DenyCloudFormationPolicyAndDeletes
            Effect: Deny
            Action:
              - cloudformation:DeleteStackInstances         ## prevent destructive StackSet instance removals
              - cloudformation:DeleteStackSet               ## prevent deletion of entire StackSets
              - cloudformation:SetStackPolicy               ## disallow changing stack protection policies
              - cloudformation:UpdateTerminationProtection  ## prevent toggling termination protection
            Resource: "*"

## -------------------------------------------------------------------------- ##
## 1 - Allow: Infrastructure

          ## -------------------------------------------------------------------
          ## IAM: permit CFN to assume only CFN exec roles (boundary enforces CFN-only)
          ## -------------------------------------------------------------------
          - Sid: PassRoleForCloudFormationExecRoles
            Effect: Allow
            Action: iam:PassRole  ## allow passing exec roles to CFN
            Resource:
              - arn:aws:iam::*:role/cfn-*                          ## customer-created CFN execution roles (any path except service-role/)
              - arn:aws:iam::*:role/cloudformation-*               ## alt customer naming for CFN exec roles
              - arn:aws:iam::*:role/service-role/cfn-*             ## CFN exec roles under 'service-role/' path
              - arn:aws:iam::*:role/service-role/cloudformation-*  ## alt naming under 'service-role/' path
            Condition:
              StringEquals:
                iam:PassedToService: cloudformation.amazonaws.com  ## CFN target only

          ## -------------------------------------------------------------------
          ## IAM: discovery + service-linked role creation (writes limited)
          ## -------------------------------------------------------------------
          - Sid: IdentityDiscoveryAndSLR
            Effect: Allow
            Action:
              - iam:CreateServiceLinkedRole  ## create SLRs when needed
              - iam:Get*                     ## read IAM entities/policies
              - iam:List*                    ## list IAM entities
            Resource: "*"

          ## -------------------------------------------------------------------
          ## IAM: policy simulation (Policy Simulator / CLI)
          ## -------------------------------------------------------------------
          - Sid: IamPolicySimulation
            Effect: Allow
            Action:
              - iam:SimulateCustomPolicy     ## run simulator against an inline/JSON policy document
              - iam:SimulatePrincipalPolicy  ## run simulator against a principal’s effective policy set
            Resource: "*"                    ## simulator needs wildcard; results are read-only

          ## -------------------------------------------------------------------
          ## IAM Access Analyzer: policy validation + CloudTrail-based generation
          ## -------------------------------------------------------------------
          - Sid: AccessAnalyzerPolicyGeneration
            Effect: Allow
            Action:
              - access-analyzer:ValidatePolicy          ## static analysis of IAM/STS/resource policies
              - access-analyzer:StartPolicyGeneration   ## kick off policy generation from CloudTrail activity
              - access-analyzer:GetGeneratedPolicy      ## retrieve the generated least-privilege policy JSON
              - access-analyzer:CancelPolicyGeneration  ## stop an in-flight generation job (cleanup)
              - access-analyzer:ListPolicyGenerations   ## list previous generation jobs/status
            Resource: "*"                               ## AA is account-scoped; actions are control-plane

          ## -------------------------------------------------------------------
          ## KMS: read + cryptographic use (Encrypt/Decrypt/DataKey); boundary enforces ViaService constraints
          ## -------------------------------------------------------------------
          - Sid: KmsReadAndUse
            Effect: Allow
            Action:
              - kms:Decrypt                          ## decrypt (service-bound via boundary)
              - kms:DescribeKey                      ## read key metadata
              - kms:Encrypt                          ## encrypt (service-bound via boundary)
              - kms:GenerateDataKey                  ## data key generation (service-bound)
              - kms:GenerateDataKeyWithoutPlaintext  ## envelope key generation
              - kms:GetKeyPolicy                     ## read key policy
              - kms:List*                            ## list keys/aliases/grants
            Resource: "*"

          ## -------------------------------------------------------------------
          ## S3: allow listing all buckets (for discovery/selection in tools/CLI)
          ## -------------------------------------------------------------------
          - Sid: S3ListAllMyBuckets
            Effect: Allow
            Action:
              - s3:ListAllMyBuckets  ## list bucket names in the account
            Resource: "*"

          ## -------------------------------------------------------------------
          ## S3: admin on network-* buckets (no policy edits except via CFN)
          ## -------------------------------------------------------------------
          - Sid: S3NetworkBucketsAdminSafe
            Effect: Allow
            Action:
              - s3:CreateBucket                ## create network-* buckets
              - s3:PutPublicAccessBlock        ## enforce account-level PAB on bucket
              - s3:GetPublicAccessBlock        ## read PAB
              - s3:PutBucketOwnershipControls  ## set bucket owner preferred settings
              - s3:GetBucketOwnershipControls  ## read ownership controls
              - s3:PutBucketVersioning         ## enable versioning
              - s3:GetBucketVersioning         ## read versioning status
              - s3:PutBucketEncryption         ## set default SSE
              - s3:GetEncryptionConfiguration  ## read SSE config
              - s3:PutBucketTagging            ## tag buckets
              - s3:GetBucketTagging            ## read bucket tags
              - s3:GetBucketLocation           ## read region
              - s3:ListBucket                  ## list objects
              - s3:ListBucketVersions          ## list object versions
            Resource:
              - arn:aws:s3:::network-*

          ## -------------------------------------------------------------------
          ## S3: only CFN may set/delete bucket policies (change control)
          ## -------------------------------------------------------------------
          - Sid: S3BucketPolicyViaCloudFormationOnly
            Effect: Allow
            Action:
              - s3:GetBucketPolicy        ## read current bucket policy
              - s3:GetBucketPolicyStatus  ## read public access status
              - s3:PutBucketPolicy        ## set/replace bucket policy
              - s3:DeleteBucketPolicy     ## remove bucket policy
            Resource:
              - arn:aws:s3:::network-*
            Condition:
              ForAnyValue:StringEquals:
                aws:CalledVia: cloudformation.amazonaws.com  ## only when invoked by CFN

          ## -------------------------------------------------------------------
          ## S3: object CRUD in network-* (SSE required; multipart supported)
          ## -------------------------------------------------------------------
          - Sid: S3NetworkObjectsStrict
            Effect: Allow
            Action:
              - s3:PutObject                 ## upload object (single-part)
              - s3:GetObject                 ## download object
              - s3:GetObjectVersion          ## download specific version
              - s3:DeleteObject              ## delete object (current version)
              - s3:DeleteObjectVersion       ## delete a specific version
              - s3:AbortMultipartUpload      ## abort in-progress multipart upload
              - s3:CreateMultipartUpload     ## start multipart upload
              - s3:UploadPart                ## upload object part
              - s3:UploadPartCopy            ## copy part from another object
              - s3:CompleteMultipartUpload   ## finalize multipart upload
              - s3:ListMultipartUploadParts  ## list uploaded parts
            Resource:
              - arn:aws:s3:::network-*/*
            Condition:
              StringEqualsIfExists:
                s3:x-amz-acl: bucket-owner-full-control  ## ensure bucket owner owns objects
                s3:x-amz-server-side-encryption:
                  - AES256   ## allow SSE-S3
                  - aws:kms  ## allow SSE-KMS (see key allowlist below)
              StringLikeIfExists:
                s3:x-amz-server-side-encryption-aws-kms-key-id: arn:aws:kms:*:*:alias/network-*  ## only network-* KMS

## -------------------------------------------------------------------------- ##

Outputs:

  ManagedPolicyArn:
    Description: "Infrastructure managed policy's ARN"
    Value: !Ref InfrastructurePolicy
