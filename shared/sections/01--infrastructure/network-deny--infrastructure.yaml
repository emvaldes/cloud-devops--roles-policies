AWSTemplateFormatVersion: "2010-09-09"
Description: "Common Deny Policy — Infrastructure (IAM, KMS, Secrets Manager, ACM, CloudFormation, MFA, PassRole guardrails)"

Parameters:

  ManagedPolicyName:
    Type: String
    Default: network-deny--infrastructure
    Description: "IAM managed policy name for Infrastructure deny guardrails"

  CustomPolicyPath:
    Type: String
    Default: "/managed/network/"
    AllowedPattern: "^/([A-Za-z0-9+=,.@_-]+/)*$"
    Description: "IAM path prefix for policies (use / to disable)"

  DnssecKmsKeyArns:
    Type: String
    Default: ""
    Description: "Optional KMS key ARNs dedicated to Route53 DNSSEC (exclude from blanket KMS denies)"
    AllowedPattern: '^$|^arn:aws:kms:[a-z0-9-]+:[0-9]{12}:key/[A-Fa-f0-9-]+(,arn:aws:kms:[a-z0-9-]+:[0-9]{12}:key/[A-Fa-f0-9-]+)*$'

Conditions:
  HasDnssecKmsKeys: !Not [ !Equals [ !Ref DnssecKmsKeyArns, "" ] ]

Resources:

  NetworkDenyInfrastructurePolicy:

    Type: AWS::IAM::ManagedPolicy
    Properties:

      ManagedPolicyName: !Ref ManagedPolicyName
      Path: !Ref CustomPolicyPath
      Description: "Deny guardrails for Infrastructure services (IAM, KMS, Secrets Manager, ACM, CloudFormation, MFA/PassRole controls)"

      PolicyDocument:
        Version: "2012-10-17"
        Statement:

## -------------------------------------------------------------------------- ##
## 1 - Infrastructure

          ## -------------------------------------------------------------------
          ## Enforce MFA presence everywhere (services that don’t pass the context use BoolIfExists)
          ## -------------------------------------------------------------------
          - Sid: DenyRequestsWithoutMFAFlag
            Effect: Deny
            Action: "*"
            Resource: "*"
            Condition:
              BoolIfExists:
                aws:MultiFactorAuthPresent: "false"  ## Deny if no MFA

          ## -------------------------------------------------------------------
          ## Session must carry mfa=true principal tag (enforced at SSO/assume time)
          ## -------------------------------------------------------------------
          - Sid: DenyUnlessSessionTaggedMFA
            Effect: Deny
            Action: "*"                       ## deny all requests when session missing required tag
            Resource: "*"
            Condition:
              StringNotEquals:
                aws:PrincipalTag/mfa: "true"  ## require federated/assumed session tag mfa=true

          ## -------------------------------------------------------------------
          ## MFA max age 1 hour
          ## -------------------------------------------------------------------
          - Sid: DenyIfMFAOlderThanOneHour
            Effect: Deny
            Action: "*"                       ## deny all requests when MFA is older than threshold
            Resource: "*"
            Condition:
              NumericGreaterThanIfExists:
                aws:MultiFactorAuthAge: 3600  ## max 3600s (1h) since last MFA verification

          # ## -------------------------------------------------------------------
          # ## IAM admin blocked; exception = discovery + SLR
          # ## -------------------------------------------------------------------
          # - Sid: DenyIamAllExceptIdentityDiscoveryAndSLR
          #   Effect: Deny
          #   NotAction:
          #     - iam:CreateServiceLinkedRole  ## allow SLR creation; further limited to network services by next guard
          #     - iam:Get*                     ## read-only inspection of identities, policies, and metadata
          #     - iam:List*                    ## list-only enumeration for discovery/audits
          #   Resource: "*"
          #
          # ## -------------------------------------------------------------------
          # ## IAM admin blocked; exception = policy simulation
          # ## -------------------------------------------------------------------
          # - Sid: DenyIamAllExceptPolicySimulation
          #   Effect: Deny
          #   NotAction:
          #     - iam:SimulateCustomPolicy     ## run IAM policy simulator on custom policy documents
          #     - iam:SimulatePrincipalPolicy  ## simulate effective permissions for a given principal
          #   Resource: "*"

          - Sid: DenyIamAllExceptReadSimulateAndSLR
            Effect: Deny
            NotAction:
              - iam:Get*                   # read-only inspection
              - iam:List*                  # list-only enumeration
              - iam:SimulateCustomPolicy   # simulate custom policy
              - iam:SimulatePrincipalPolicy # simulate principal policy
              - iam:CreateServiceLinkedRole # create SLR (restricted by condition block below)
            Resource: "*"

          ## -------------------------------------------------------------------
          ## Only permit SLR creation for network services
          ## -------------------------------------------------------------------
          - Sid: DenyCreateServiceLinkedRoleUnlessNetworkServices
            Effect: Deny
            Action: iam:CreateServiceLinkedRole         ## block SLR creation by default
            Resource: "*"
            Condition:
              StringNotEquals:                          ## allow only for specific AWS network services
                iam:AWSServiceName:
                  - elasticloadbalancing.amazonaws.com  ## ELBv2 / NLB / ALB
                  - globalaccelerator.amazonaws.com     ## AWS Global Accelerator
                  - network-firewall.amazonaws.com      ## AWS Network Firewall
                  - route53resolver.amazonaws.com       ## Route53 Resolver
                  - vpc-lattice.amazonaws.com           ## VPC Lattice

          ## -------------------------------------------------------------------
          ## KMS administration blocked (key/alias/grant/policy)
          ## -------------------------------------------------------------------
          - Sid: DenyKmsKeyAdministration
            Effect: Deny
            ## Toggle Resource/NotResource based on whether DnssecKmsKeyArns is set
            Resource: !If [ HasDnssecKmsKeys, !Ref "AWS::NoValue", "*" ]
            ## NotResource: !Ref DnssecKmsKeyArns  ## EXCEPT these DNSSEC keys
            NotResource: !If
              - HasDnssecKmsKeys
              - !Split [ ",", !Ref DnssecKmsKeyArns ]
              - !Ref "AWS::NoValue"
            Action:
              - kms:CancelKeyDeletion    ## prevent canceling scheduled key deletion once initiated
              - kms:Create*              ## prevent creation of KMS resources (keys, replicas, etc.)
              - kms:CreateAlias          ## prevent creating new key aliases
              - kms:CreateGrant          ## prevent creating grants (delegated key use)
              - kms:Delete*              ## prevent deletions of keys/aliases/grants/policies
              - kms:DeleteAlias          ## explicitly prevent alias deletions
              - kms:Disable*             ## prevent disabling keys/features (e.g., DisableKey, DisableKeyRotation)
              - kms:DisableKeyRotation   ## prevent turning off key rotation
              - kms:EnableKeyRotation    ## prevent turning on key rotation (freeze rotation state)
              - kms:PutKeyPolicy         ## prevent key policy changes (admin/policy tamper)
              - kms:RetireGrant          ## prevent grantees from retiring grants outside governance
              - kms:RevokeGrant          ## prevent administrators from revoking grants ad hoc
              - kms:ScheduleKeyDeletion  ## prevent scheduling key deletion
              - kms:TagResource          ## prevent adding tags on KMS resources
              - kms:UntagResource        ## prevent removing tags on KMS resources
              - kms:Update*              ## prevent updates to keys/aliases/grants/config
              - kms:UpdateAlias          ## explicitly prevent alias updates/retargeting

          ## -------------------------------------------------------------------
          ## Only allow Encrypt/ReEncrypt/DataKey via Secrets Manager (enforce service-bound usage)
          ## -------------------------------------------------------------------
          - Sid: DenyKmsEncryptAndDataKeyExceptSecretsManager
            Effect: Deny
            Action:
              - kms:Encrypt           ## prevent direct encryption unless invoked via Secrets Manager
              - kms:GenerateDataKey*  ## prevent data key generation outside Secrets Manager
              - kms:ReEncrypt*        ## prevent re-encryption unless through Secrets Manager
            Resource: "*"
            Condition:
              StringNotEqualsIfExists:
                kms:ViaService:
                  - secretsmanager.amazonaws.com  ## permit KMS only when invoked by Secrets Manager (encrypt/decrypt/rotation); direct principal KMS calls remain denied
                  - ssm.amazonaws.com             ## allow SSM Parameter Store encryption
                  - s3.amazonaws.com              ## allow S3-initiated KMS use for SSE-KMS (PutObject/Copy/Multipart, replication, lifecycle); still denies direct KMS calls by the principal

          ## -------------------------------------------------------------------
          ## Decrypt allowed only when invoked by approved services (logs, s3, secretsmanager, ssm)
          ## -------------------------------------------------------------------
          - Sid: DenyKmsDecryptOutsideApprovedServices
            Effect: Deny
            Action:
              - kms:Decrypt                        ## block decrypt by default
            Resource: "*"
            Condition:
              StringNotEqualsIfExists:             ## only allow when request comes from these AWS services
                kms:ViaService:
                  - logs.amazonaws.com             ## CloudWatch Logs (log group encryption/decryption)
                  - s3.amazonaws.com               ## S3 (SSE-KMS object encryption/decryption)
                  - secretsmanager.amazonaws.com   ## Secrets Manager (secret rotation/retrieval)
                  - ssm.amazonaws.com              ## Systems Manager Parameter Store (SecureString)

          ## -------------------------------------------------------------------
          ## Secrets Manager sensitive ops blocked; read/get remains via ceiling
          ## -------------------------------------------------------------------
          - Sid: DenySecretsManagerSensitiveOps
            Effect: Deny
            Action:
              - secretsmanager:CancelRotateSecret        ## prevent canceling an in-progress rotation
              - secretsmanager:Delete*                   ## prevent deletion of secrets, versions, replicas, policies
              - secretsmanager:DeleteResourcePolicy      ## prevent removal of resource-based policy
              - secretsmanager:PutResourcePolicy         ## prevent setting/updating resource-based policy (e.g., cross-account)
              - secretsmanager:RotateSecret              ## prevent manual rotation initiation
              - secretsmanager:StopReplicationToReplica  ## prevent stopping cross-region replication
            Resource: "*"

          ## -------------------------------------------------------------------
          ## ACM minimal safety (keep account-level + key export off)
          ## -------------------------------------------------------------------
          - Sid: DenyAcmAccountAndExportOnly
            Effect: Deny
            Action:
              - acm:ExportCertificate        ## prevent private key exfiltration
              - acm:PutAccountConfiguration  ## prevent account-wide ACM setting changes
            Resource: "*"

## -------------------------------------------------------------------------- ##

Outputs:

  ## ---------------------------------------------------------------------------
  ## Resolved ARN of the Infrastructure deny policy
  ## ---------------------------------------------------------------------------
  NetworkDenyInfrastructurePolicyArn:
    Description: "ARN of the Infrastructure deny IAM managed policy"
    Value: !Ref NetworkDenyInfrastructurePolicy
